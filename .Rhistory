}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(1:num,6))
print(perm)
}
for(i in num){
k = 0
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
k <- 0
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(i,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
factorial(6)
for(i in num){
perm = unique(sample(num,720))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
permutation = replicate(perm,720,simplify = array)
#print(permutation)
}
abc = c(1,3,3)
replicate(abc,3)
replicate(abc,"3")
rep(abc,"3")
for(i in num){
perm = unique(sample(num,6))
print(perm)
permutation = rep(perm,720,simplify = array)
#print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720)
final <- as.data.frame(permutation)
print(final)
}
View(final)
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720)
final <- as.matrix(permutation)
print(final)
}
View(final)
factorial(6)
for(i in num){
perm = unique(sample(num,6))
print(perm)
#permutation = rep(perm,720)
#final <- as.matrix(permutation)
#print(final)
}
for(i in num){
perm = unique(sample(num))
print(perm)
#permutation = rep(perm,720)
#final <- as.matrix(permutation)
#print(final)
}
perm = unique(sample(num))
print(perm)
permutation = rep(perm,720)
final <- as.matrix(permutation)
View(final)
final <- as.matrix(permutation)
rm(final)
permutation = rep(perm,720)
class(permutation)
a = 6
num = (1:a)
perm = unique(sample(num))
#print(perm)
permutation = c(rep(perm,720))
permutation
head(permutation)
tail(permutation)
class(permutation)
getwd()
setwd("/home/pramod/Documents/Kaggle/House price/")
ls()
load("house.r")
load("house.r")
load("house_test.r")
load("house.r")
"house.r"
setwd("/home/pramod/Documents/Kaggle/House price/")
library(dplyr)
library(ggplot2)
library(xgboost)
library(corrplot)
library(car)
test.csv <- read.csv("test.csv",stringsAsFactors = F)
train.csv <- read.csv("train.csv",stringsAsFactors = F)
test.csv$Saleprice <- "Null"
train_num <- select_if(train.csv,is.numeric)
train_char <- select_if(train.csv,is.character)
train_char$Price <- train.csv$SalePrice
train_char$ID <- train.csv$Id
train_char <- train_char[,c(ncol(train_char),1:ncol(train_char)-1)]
View(train_char)
load("/home/pramod/Downloads/Data.Election.rda")
View(Data.Election)
rm(Data.Election)
library(car)
#(Visualisation,correlations <- cor(train_num[,c(5,6,7,8, 16:25)], use="everything")
#corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
#summary(correlations)
#con_saletype <- cor(x = train_char$SaleCondition,
#                    y = train_char$SaleType)#
#price_yearsold
#pearson correlation
price_yearsold <- cor(x = train_num$SalePrice,
y = train_num$YrSold)
#price_yearsold  >>>> "-0.028"
#Indicates that we have less correlation between Year sold and Sale Price which makes sense
#spearman correlation
price_yearsold_spear <- cor(x = train_num$SalePrice,
y = train_num$YrSold,method = "spearman")
#kendall correlation
price_yearsold_kendal <- cor(x = train_num$SalePrice,
y = train_num$YrSold,method = "kendall")
#All of the test yielded the same correlation coefficient, indicating that we have less cor
#among these two var.
#simple plot
plot(x = train_num$YrSold,
y = train_num$SalePrice) +
abline(lm(train_num$SalePrice~train_num$YrSold), col="red")
#Cor.test
price_yearsold_cortest <- cor.test(x = train_num$SalePrice,
y = train_num$YrSold)
price_yearsold_cortest
#Year Built
price_yearbuild <- cor(x = train_num$SalePrice,
y= train_num$YearBuilt)
summary(price_yearbuild)
price_yearbuild
scatterplot(x = train_num$YearBuilt,
y= train_num$SalePrice,data = train_num)
+ abline(lm(train_num$SalePrice~train_num$YearBuilt
,color = "Blue"))
price_yearbuild_test <- cor.test(x = train_num$SalePrice,
y = train_num$YearBuilt )
price_yearbuild_test
#Conclusion
#Since the cor.test and cor function have given a positive value
#We can conclude that year built more or less has an effect on the Sale price
df <- read.csv("train.csv", stringsAsFactors = F)
row.names(df) <- df$Id
df <- df[,-1]
df[is.na(df)] <- 0
View(df)
class(df$SalePrice)
str(df)
str(test.csv)
str(train.csv)
for(i in colnames(df[,sapply(df, is.character)])){
df[,i] <- as.factor(df[,i])
}
str(df)
View(head(df))
View(head(train.csv))
View(head(df))
test.n <- sample(1:nrow(df), nrow(df)/3, replace = F)
test <- df[test.n,]
train <- df[-test.n,]
View(train)
View(test)
rm(test.n, df)
model <- rpart(SalePrice ~., data = train, method = "anova")
install.packages("rpart")
library(rpart)
model <- rpart(SalePrice ~., data = train, method = "anova")
summary(model)
rm(model)
model_kag <- rpart(SalePrice ~., data = train, method = "anova")
summary(model_kag)
summary(model_kag)
predict <- predict(model, test)
View(test)
predict <- predict(model_kag, test)
source('~/.active-rstudio-document', echo=TRUE)
rm(predict)
predict_kag <- predict(model_kag, test)
summary(predict_kag)
predict_kag
plot(predict_kag,train.csv$SalePrice)
plot(x = predict_kag,y = train.csv$SalePrice)
qqplot(x = predict_kag,y = train.csv$SalePrice)
scatterplot(x = predict_kag,
y = train.csv$SalePrice )
plot(x = predict_kag)
plot(x = train.csv$SalePrice)
qqnorm(y = predict_kag)
plot(x = predict_kag)
ggplot() +
geom_line(data=predict_kag, aes(x=predict_kag, y=B), color='green') +
geom_line(data=train_num, aes(x=train_num$SalePrice, y=D), color='red')
ggplot() +
geom_point(data=train.csv$SalePrice, aes(x = train.csv$SalePrice, color= "red")) +
geom_point(data=predict_kag, aes(x = predict_kag, color= "blue"))
ggplot() +
geom_point(data=train.csv$SalePrice, aes(x = train.csv$SalePrice, color= "red")) +
geom_histogram(data=predict_kag, aes(x = predict_kag, color= "blue"))
ggplot() +
geom_point(data=train.csv$SalePrice, aes(x = train.csv$SalePrice, color= "red")) +
geom_histogram(data=predict_kag, aes(x = predict_kag, color= "blue"))
ggplot() +
geom_histogram(data=train.csv$SalePrice, aes(x = train.csv$SalePrice, color= "red")) +
geom_histogram(data=predict_kag, aes(x = predict_kag, color= "blue"))
ggplot() +
geom_abline(data = predict_kag,aes(x = predict_kag,color = "red"))
ggplot() +
geom_bar(data = predict_kag,aes(x = predict_kag,color = "red"))
ggplot() +
geom_histogram(data = predict_kag,aes(x = predict_kag,color = "red"))
ggplot() +
geom_histogram(data = predict_kag,aes(x = predict_kag,color = "red"))
qqplot(x = train.csv$SalePrice)
qqplot(x = train.csv$SalePrice,y = predict_kag)
class(predict_kag)
pred_price <- c(predict_kag)
length(pred_price\)
length(pred_price)
length(train_num$SalePrice)
486*3
cor(x = predict_kag,y = train_num$SalePrice)
pred_price <- as.data.frame(pred_price)
View(pred_price)
plot(pred_price)
pred_price$id <- 1:length(pred_price)
View(pred_price)
pred_price$id <- 1:486
View(pred_price)
plot(pred_price$id,y = pred_price$pred_price)
plot(y = pred_price$id,x = pred_price$pred_price)
ggplot() +
geom_histogram(data=pred_price, aes(x = pred_price$pred_price,y = pred_price$id, color= "red")) +
ggplot() +
geom_histogram(data=pred_price, aes(x = pred_price$pred_price,y = pred_price$id, color= "red"))
ggplot() +
geom_histogram(data=pred_price, aes(x = pred_price$pred_price,y = pred_price$id, color= "red"))
ggplot() +
geom_histogram(data=pred_price, aes(x = pred_price,y = pred_price$id, color= "red"))
ggplot() +
geom_abline(data=pred_price, aes(x = pred_price,y = pred_price$id, color= "red"))
ggplot() +
geom_abline(data=pred_price, aes(x = pred_price,y = pred_price$id, color= "red"))
ggplot() +
geom_abline(data=pred_price, aes(x = pred_price,y = id, color= "red"))
ggplot() +
geom_abline(data=pred_price, aes(x = pred_price,y = id, color= "red",intercept = "20"))
ggplot() +
geom_abline(data=pred_price, aes(x = pred_price,y = id, color= "red",intercept = "20",slope ="10"))
ggplot() +
geom_density(data=pred_price, aes(x = pred_price,y = id, color= "red"))
ggplot() +
geom_density(data=pred_price, aes(x = pred_price,y = pred_price$id, color= "red"))
qqplot(x = pred_price$pred_price,
y = pred_price$id)
scatterplot(x = pred_price$pred_price,
y = pred_price$id )
scatterplot(y = pred_price$pred_price,
x = pred_price$id )
RMSE1 <- RMSE(predict_kag, test$SalePrice)
library(dplyr)
library(tidyr)
library(rpart)
library(randomForest)
library(ggplot2)
library(gbm)
install.packages("gbm")
train_pred <- read.csv("train.csv",stringsAsFactors = F)
row.names(train_pred) <- train_pred$Id
train_pred <- train_pred[,-1]
train_pred[is.na(train_pred)] <- 0
for(i in colnames(train_pred[,sapply(train_pred,is.character)])){
train_pred[,i] <- as.factor(train_pred[,i])
}
str(train_pred)
test.n <- sample(1:nrow(df), nrow(df)/3, replace = F)
test.n <- sample(1:nrow(train_pred), nrow(train_pred)/3, replace = F)
View(head(test.n))
test.n <- sample(1:nrow(train_pred), nrow(train_pred)/3, replace = F)
View(head(test.n))
rm(test.n)
model_kag <- rpart(SalePrice ~., data = train_pred, method = "anova")
predict_kag_pred <- predict(model_kag, test)
predict_kag_pred <- predict(model_kag, test.csv)
head(predict_kag_pred)
head(predict_kag)
library(gbm)
RMSE1 <- RMSE(predict, test$SalePrice)
installed.packages("Metrics")
install.packages("Metrics")
library(gbm)
library(Metrics)
RMSE1 <- RMSE(predict_kag_pred, test.csv$Saleprice)
RMSE1 <- rmse(predict_kag_pred, test.csv$Saleprice)
class(predict_kag_pred)
class(test.csv$Saleprice)
test.csv$Saleprice <- as.numeric(test.csv$Saleprice)
RMSE1 <- rmse(predict_kag_pred, test.csv$Saleprice)
RMSE1
View(RMSE1)
View(test.csv)
test.csv <- read.csv("test.csv",stringsAsFactors = F)
View(test.csv)
head(train.csv$SalePrice)
head(predict_kag_pred)
RMSE1 <- rmse(predict_kag_pred, train.csv$Saleprice)
View(RMSE1)
View(RMSE1)
rmse(predict_kag_pred)
rmse(predict_kag_pred,predicted = train.csv$SalePrice)
rmse(actual =  train.csv$SalePrice,predicted = predict_kag_pred)
plot1 <- predict_kag_pred~train_num$SalePrice
View(test.csv)
View(test)
RMSE1 <- rmse(predict_kag_pred, train.csv$Saleprice)
View(RMSE1)
rmse(actual =  train.csv$SalePrice,predicted = predict_kag_pred)
Root_mean <- rmse(actual =  train.csv$SalePrice,predicted = predict_kag_pred)
View(Root_mean)
plot1 <- predict_kag_pred~train_num$SalePrice
plot2 <- train_num$SalePrice~predict_kag_pred
plot2 <- train_num$SalePrice~predict_kag_pred
model_kag1 <- rpart(SalePrice ~., data = test.csv, method = "anova")
predict_kag_pred <- predict(model_kag, test.csv)
head(predict_kag_pred)
test.csv$Sale <- "Null"
model_kag1 <- rpart(SalePrice ~., data = test.csv, method = "anova")
model_kag1 <- rpart(Sale ~., data = test.csv, method = "anova")
model_kag1
predict_kag_pred <- predict(model_kag1, test.csv)
predict_kag_pred_1 <- predict(model_kag1, test.csv)
head(predict_kag_pred_1)
predict_kag_pred <- predict(model_kag, test.csv)
head(predict_kag_pred)
rm(predict_kag_pred_1)
rm(model_kag1)
plot1 <- predict_kag_pred~train_num$SalePrice
plot2 <- train_num$SalePrice~predict_kag_pred
