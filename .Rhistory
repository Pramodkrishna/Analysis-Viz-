is.integer(a)
is.integer(b)
a = b
print a
print b
a = b
print a
print (a)
print (b)
a == b
print (b)
print (a)
a = as.integer(10)
a == b
b = as.integer(20)
a == b
print (a)
print (b)
a = as.integer(10)
b = as.integer(20)
is.integer(a)
is.integer(b)
a = b
print (a)
print (b)
biocLite("Biobase")
bioCLite("Biobase")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
a = 7
num = (1:7)
perm = unique(sample(num,7))
num = (1:7)
for(i in num){
perm = unique(sample(num,7))
print(perm)
}
num = (1:a)
num
a = 6
num = (1:a)
num
a = 6
num = (1:a)
for(i in num){
perm = unique(sample(num,7))
print(perm)
}
a = 6
num = (1:a)
for(i in num){
perm = unique(sample(num,7))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(1:num,6))
print(perm)
}
for(i in num){
k = 0
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
k <- 0
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(i,6)
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
for(i in num){
perm = unique(sample(i,6))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
}
factorial(6)
for(i in num){
perm = unique(sample(num,720))
print(perm)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
permutation = replicate(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
print(perm)
permutation = replicate(perm,720,simplify = array)
#print(permutation)
}
abc = c(1,3,3)
replicate(abc,3)
replicate(abc,"3")
rep(abc,"3")
for(i in num){
perm = unique(sample(num,6))
print(perm)
permutation = rep(perm,720,simplify = array)
#print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720,simplify = array)
print(permutation)
}
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720)
final <- as.data.frame(permutation)
print(final)
}
View(final)
for(i in num){
perm = unique(sample(num,6))
#print(perm)
permutation = rep(perm,720)
final <- as.matrix(permutation)
print(final)
}
View(final)
factorial(6)
for(i in num){
perm = unique(sample(num,6))
print(perm)
#permutation = rep(perm,720)
#final <- as.matrix(permutation)
#print(final)
}
for(i in num){
perm = unique(sample(num))
print(perm)
#permutation = rep(perm,720)
#final <- as.matrix(permutation)
#print(final)
}
perm = unique(sample(num))
print(perm)
permutation = rep(perm,720)
final <- as.matrix(permutation)
View(final)
final <- as.matrix(permutation)
rm(final)
permutation = rep(perm,720)
class(permutation)
a = 6
num = (1:a)
perm = unique(sample(num))
#print(perm)
permutation = c(rep(perm,720))
permutation
head(permutation)
tail(permutation)
class(permutation)
setwd("/home/pramod/Documents/Kaggle/House price/")
library(corrplot)
library(Metrics)
require(ggplot2) # for data visualization
require(stringr) #extracting string patterns
require(Matrix) # matrix transformations
require(glmnet) # ridge, lasso & elastinet
require(xgboost) # gbm
require(randomForest)
require(Metrics) # rmse
require(dplyr) # load this in last so plyr doens't overlap it
require(caret) # one hot encoding
require(scales) # plotting $$
require(e1071) # skewness
require(corrplot) # correlation plo
test.csv <- read.csv("test.csv",stringsAsFactors = F)
train.csv <- read.csv("train.csv",stringsAsFactors = F)
test.csv$Saleprice <- "Null"
train_num <- select_if(train.csv,is.numeric)
train_char <- select_if(train.csv,is.character)
train_char$Price <- train.csv$SalePrice
train_char$ID <- train.csv$Id
train_char <- train_char[,c(ncol(train_char),1:ncol(train_char)-1)]
colnames(train_char)
test_price <- select_if(test.csv,is.numeric)
test_price[is.na(test_price)] <- 0
test_price$price <- as.numeric('null')
s1_data <- train_num
sapply(s1_data, function(x) sum(is.na(x)))
s1_data$LotFrontage[is.na(s1_data$LotFrontage)] <- 80
s1_data$GarageYrBlt[is.na(s1_data$GarageYrBlt)] <- 1980
s1_data$MasVnrArea[is.na(s1_data$MasVnrArea)] <- 103
s1_cor <- as.data.frame(cor(s1_data))
s1_cor_fin <- as.data.frame(s1_cor)
s1_cor_price <- as.data.frame(s1_cor[38])
s1_cor_price$SalePrice[is.na(s1_cor_price$SalePrice)] <- 0
s1_cor_price$names <- colnames(s1_cor)
View(s1_cor_price)
s1_cor_price <- s1_cor_price[order(s1_cor_price$SalePrice,decreasing = T),]
s1_price <- as.data.frame(s1_cor_price[which(s1_cor_price[,1]>0.5),])
s1_price$names
s1_lm1 <- lm(data = s1_data,formula = SalePrice ~ OverallQual+GrLivArea+GarageCars
+GarageArea+TotalBsmtSF+X1stFlrSF
+FullBath+TotRmsAbvGrd+YearBuilt+YearRemodAdd)
price_pred <- predict(s1_lm1,test_price,interval = 'confidence')
head(price_pred)
s1_price2 <- as.data.frame(s1_cor_price[which(s1_cor_price[,1]>0.3),])
s1_price2$names
s1_lm2 <- lm(data = s1_data,formula = SalePrice ~ OverallQual+GrLivArea+GarageCars
+GarageArea+TotalBsmtSF+X1stFlrSF
+FullBath+TotRmsAbvGrd+YearBuilt+YearRemodAdd+MasVnrArea
+Fireplaces+GarageYrBlt+BsmtFinSF1+LotFrontage+WoodDeckSF+X2ndFlrSF+
OpenPorchSF)
price_pred2 <- predict(s1_lm2,test_price)
price_pred2
train_price <- lm(formula = SalePrice ~ ., data = train_num,na.action='na.exclude')
train_price
s1_lm_comp <- predict(train_price,test_price)
s1_lm_comp
s1_lm_comp <- predict(train_price,test_price,interval = 'confidence')
rm(s1_lm_comp)
s2 <- predict(train_price,test_price,interval = 'confidence')
head(s2)
mean(s2)
mean(train_num$SalePrice)
s2 <- predict(train_price,test_price)
head(s2)
mean(s2)
s2 <- predict(train_price,test_price)
class(s2)
mean(train_num$SalePrice)
plot(mean(s2))
plot(mean(s2),mean(s1_lm1),mean(s1_lm2))
plot(mean(s1_lm1),mean(s1_lm2))
mean(s1_lm1)
s1_lm1 <- lm(data = s1_data,formula = SalePrice ~ OverallQual+GrLivArea+GarageCars
+GarageArea+TotalBsmtSF+X1stFlrSF
+FullBath+TotRmsAbvGrd+YearBuilt+YearRemodAdd)
price_pred <- predict(s1_lm1,test_price,interval = 'confidence')
head(price_pred)
s1_price2 <- as.data.frame(s1_cor_price[which(s1_cor_price[,1]>0.3),])
View(s1_price2)
s1_price2$names
s1_lm2 <- lm(data = s1_data,formula = SalePrice ~ OverallQual+GrLivArea+GarageCars
+GarageArea+TotalBsmtSF+X1stFlrSF
+FullBath+TotRmsAbvGrd+YearBuilt+YearRemodAdd+MasVnrArea
+Fireplaces+GarageYrBlt+BsmtFinSF1+LotFrontage+WoodDeckSF+X2ndFlrSF+
OpenPorchSF)
price_pred2 <- predict(s1_lm2,test_price)
price_pred2
s2_price <- predict(train_price,test_price)
plot(price_pred,price_pred2)
plot(price_pred)
price_pred2
plot(price_pred2)
plot(s2_price)
ggplot(data = s2_price,aes(x = s2_price))+geom_point()
ggplot(data = s2_price,aes(x = table(s2_price))+geom_point()
ggplot(data = s2_price,aes(x = table(s2_price))+geom_point())
ggplot(data = s2_price,aes(x = table(s2_price))+geom_point())
qqplot(s2_price)
qqplot(s2_price,y = 1:length(s2_price))
residuals.lm(object = s2_price)
scatterplot3d::scatterplot3d(x = s2_price)
plot(s2_price)
s2_price <- predict(train_price,test_price,interval = 'lol')
s2_price
s2_price <- predict(train_price,test_price,interval = 'confidence')
s1_lm1$residuals
table(s1_lm1)
table(s1_lm1$residuals)
residuals.lm(object = s1_lm1$residuals)
residuals.lm(object = s1_lm1)
residuals.lm(object = s1_lm1$rank)
s1_lm1$rank
s1_lm1$fitted.values
plot(x = s1_lm1$fitted.values,s1_lm1$residuals)
plot(x = s1_lm1$fitted.values,s1_lm1$coefficients)
plot(x = s1_lm1$fitted.values,s1_lm1$assign)
plot(x = s1_lm1$fitted.values,s1_lm1$call)
plot(x = s1_lm1$fitted.values,s1_lm1$model)
train_price$residuals
plot(train_price$residuals)
ggplot(data = train_price,aes(x = train_price$residuals,
y = train_price$fitted.values)) +geom_point()
ggplot(data = train_price,aes(x = train_price$residuals)) +geom_point()
ggplot(data = train_price,aes(x = train_price$residuals,y = train_price$coefficients)) +geom_point()
s2_price <- as.data.frame(s2_price)
View(s2_price)
View(s2_price)
s3_price <- predict(train_price,test_price,interval ='predict')
head(s3_price)
head(s2_price)
rm(s3_price)
View(test_price)
test_price$price <- predict(train_price,test_price,interval ='predict')
View(test_price)
summary(s1_lm1)
summary(s1_lm2)
View(test_price)
summary(train_price)
plot(s2_price)
plot(train_price)
plot(train_price)
sum(train_price$residuals)
plot(price_pred2)
plot(s1_lm1)
plot(s1_lm2)
plot(s1_lm1,pch = 18, col = "Blue")
cooks.distance(s1_lm1)
plot(cooks.distance(s1_lm1))
abline(s1_lm1)
plot(s1_lm1,pch = 18, col = "Blue")
plot(s1_lm2)
plot(train_price)
plot(s1_lm1,pch = 18, col = "Green")
plot(s1_lm1,pch = 30, col = "Blue")
plot(s1_lm1,pch = 10, col = "Blue")
plot(s1_lm1,pch = 20)
plot(s1_lm2,pch = 20)
plot(s1_lm1,pch = 20)
